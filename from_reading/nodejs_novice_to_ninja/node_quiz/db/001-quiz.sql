-- PostgreSQL quiz database

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
SET default_tablespace = '';
SET default_table_access_method = heap;

-- create DB user

CREATE USER quizuser WITH ENCRYPTED PASSWORD 'quizpass';
GRANT ALL PRIVILEGES ON DATABASE quiz TO quizuser;

-- question table

CREATE TABLE IF NOT EXISTS public.question (
  id smallint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  text character varying(1000) NOT NULL UNIQUE
);

ALTER TABLE public.question OWNER TO quizuser;

-- answer table

CREATE TABLE IF NOT EXISTS public.answer (
  id smallint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question_id smallint NOT NULL,
  text character varying(500) NOT NULL,
  correct boolean DEFAULT false NOT NULL,
  CONSTRAINT answer_quesion_fk FOREIGN KEY (question_id) REFERENCES public.question(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE INDEX answer_question_id_idx ON public.answer(question_id);

ALTER TABLE public.answer OWNER TO quizuser;

-- game table

CREATE TABLE IF NOT EXISTS public.game (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question_offset smallint NOT NULL DEFAULT 0,
  questions_asked smallint NOT NULL DEFAULT 10,
  timeout_answered smallint NOT NULL DEFAULT 5,
  score_correct smallint NOT NULL DEFAULT 1,
  score_fastest smallint NOT NULL DEFAULT 1,
  score_incorrect smallint NOT NULL DEFAULT -1,
  score_noanswer smallint NOT NULL DEFAULT 0,
  time_created timestamp NOT NULL DEFAULT NOW(),
  time_started timestamp NULL DEFAULT NULL
);

CREATE INDEX game_time_started_idx ON public.game(time_started);

ALTER TABLE public.game OWNER TO quizuser;

-- player table

CREATE TABLE IF NOT EXISTS public.player (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  game_id integer NOT NULL,
  name character varying(10) NOT NULL,
  CONSTRAINT player_game_fk FOREIGN KEY (game_id) REFERENCES public.game(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE INDEX player_game_id_idx ON public.player(game_id);

ALTER TABLE public.player OWNER TO quizuser;

-- pubsub table

CREATE TABLE IF NOT EXISTS public.pubsub (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  game_id integer NOT NULL,
  type character varying(20) NOT NULL,
  data jsonb NULL,
  queued timestamp NOT NULL DEFAULT NOW(),
  CONSTRAINT pubsub_game_fk FOREIGN KEY (game_id) REFERENCES public.game(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE INDEX pubsub_game_id_idx ON public.pubsub(game_id);
CREATE INDEX pubsub_queued_idx ON public.pubsub(queued);

ALTER TABLE public.pubsub OWNER TO quizuser;

-- pubsub notification trigger

CREATE OR REPLACE FUNCTION pubsub_insert_notify()
    RETURNS trigger AS
$BODY$
    BEGIN
        PERFORM pg_notify('pubsub_insert', row_to_json(NEW)::text);
        RETURN NULL;
    END;
$BODY$
    LANGUAGE plpgsql VOLATILE
    COST 100;

CREATE TRIGGER "pubsub_insert_trigger" AFTER INSERT ON public.pubsub FOR EACH ROW EXECUTE FUNCTION pubsub_insert_notify();
